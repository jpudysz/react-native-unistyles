///
/// HybridNativePlatformSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNativePlatformSpec.hpp"

// Forward declaration of `HybridNativePlatformSpec_cxx` to properly resolve imports.
namespace Unistyles { class HybridNativePlatformSpec_cxx; }

// Forward declaration of `Insets` to properly resolve imports.
namespace margelo::nitro::unistyles { struct Insets; }
// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class ColorScheme; }
// Forward declaration of `Orientation` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class Orientation; }
// Forward declaration of `Dimensions` to properly resolve imports.
namespace margelo::nitro::unistyles { struct Dimensions; }
// Forward declaration of `UnistylesNativeMiniRuntime` to properly resolve imports.
namespace margelo::nitro::unistyles { struct UnistylesNativeMiniRuntime; }
// Forward declaration of `UnistyleDependency` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class UnistyleDependency; }

#include "Insets.hpp"
#include "ColorScheme.hpp"
#include "Orientation.hpp"
#include <string>
#include "Dimensions.hpp"
#include "UnistylesNativeMiniRuntime.hpp"
#include "UnistyleDependency.hpp"
#include <vector>
#include <functional>

#include "Unistyles-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::unistyles {

  /**
   * The C++ part of HybridNativePlatformSpec_cxx.swift.
   *
   * HybridNativePlatformSpecSwift (C++) accesses HybridNativePlatformSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNativePlatformSpec_cxx can directly inherit from the C++ class HybridNativePlatformSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNativePlatformSpecSwift: public virtual HybridNativePlatformSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNativePlatformSpecSwift(const Unistyles::HybridNativePlatformSpec_cxx& swiftPart):
      HybridObject(HybridNativePlatformSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Unistyles::HybridNativePlatformSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }
    std::string toString() override {
      return _swiftPart.toString();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline Insets getInsets() override {
      auto __result = _swiftPart.getInsets();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline ColorScheme getColorScheme() override {
      auto __result = _swiftPart.getColorScheme();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double getFontScale() override {
      auto __result = _swiftPart.getFontScale();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double getPixelRatio() override {
      auto __result = _swiftPart.getPixelRatio();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline Orientation getOrientation() override {
      auto __result = _swiftPart.getOrientation();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string getContentSizeCategory() override {
      auto __result = _swiftPart.getContentSizeCategory();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline Dimensions getScreenDimensions() override {
      auto __result = _swiftPart.getScreenDimensions();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline Dimensions getStatusBarDimensions() override {
      auto __result = _swiftPart.getStatusBarDimensions();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline Dimensions getNavigationBarDimensions() override {
      auto __result = _swiftPart.getNavigationBarDimensions();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline bool getPrefersRtlDirection() override {
      auto __result = _swiftPart.getPrefersRtlDirection();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void setRootViewBackgroundColor(double color) override {
      auto __result = _swiftPart.setRootViewBackgroundColor(std::forward<decltype(color)>(color));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setNavigationBarHidden(bool isHidden) override {
      auto __result = _swiftPart.setNavigationBarHidden(std::forward<decltype(isHidden)>(isHidden));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setStatusBarHidden(bool isHidden) override {
      auto __result = _swiftPart.setStatusBarHidden(std::forward<decltype(isHidden)>(isHidden));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setImmersiveMode(bool isEnabled) override {
      auto __result = _swiftPart.setImmersiveMode(std::forward<decltype(isEnabled)>(isEnabled));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline UnistylesNativeMiniRuntime getMiniRuntime() override {
      auto __result = _swiftPart.getMiniRuntime();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void registerPlatformListener(const std::function<void(const std::vector<UnistyleDependency>& /* dependencies */, const UnistylesNativeMiniRuntime& /* miniRuntime */)>& callback) override {
      auto __result = _swiftPart.registerPlatformListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void registerImeListener(const std::function<void(const UnistylesNativeMiniRuntime& /* miniRuntime */)>& callback) override {
      auto __result = _swiftPart.registerImeListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void unregisterPlatformListeners() override {
      auto __result = _swiftPart.unregisterPlatformListeners();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    Unistyles::HybridNativePlatformSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::unistyles
